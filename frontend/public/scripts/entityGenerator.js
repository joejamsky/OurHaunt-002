const JSON_CONFIG="entityConfig.json";let GLOBAL_ENTITY,GLOBAL_BACKSTORY,dataObj;async function fetchData(e){try{const t=await fetch(`../assets/data/${e}`);return await t.json()}catch(e){console.error("Failed to fetch:",e.message)}}async function initEntity(){const e=await fetchData(JSON_CONFIG);GLOBAL_ENTITY=new EntityTemplate(e),GLOBAL_BACKSTORY=generateBackstory(GLOBAL_ENTITY),console.log("init",GLOBAL_BACKSTORY)}initEntity().catch((e=>console.error(e)));const generateBackstory2=e=>{console.log("entity",e);let t="All"===e.gender?"genderless":e.gender,n=e.relationships.partners?`You had a partner named ${e.relationships.partners}.`:"",o=e.relationships.siblings.length>0?`Your siblings were ${e.relationships.siblings.join(", ")}.`:"You had no siblings.",i=e.relationships.friends.length>0?`Your friends were ${e.relationships.friends.join(", ")}.`:"You had no friends.",s=e.profession?`Profession: ${e.profession}. Income: ${e.income.toFixed(2)}.`:"You were too young to work.",a="You are playing a game. Someone will ask you questions and you will respond in json with a score from 0-5 depending on how close the question is to the truth. 0 for not close to the truth. 5 for it is the truth.\n";return a+="Do not respond in any other way besides json and a rating from 0-5.\n",a+='For example, every response should look like {grade: "int"}\n',a+=`Name: ${e.name}.\n`,a+=`Gender: ${t}.\n`,a+=`Type of spirit: ${e.type}.\n`,a+=`Cause of death: ${e.causeOfDeath}.\n`,a+=`Birthday: ${e.birthdate}.\n`,a+=`Day you died: ${e.deathdate}.\n`,a+=`Age when you died in years: ${e.deathAge}.\n`,a+=`Age since you died in years: ${e.currentAge}.\n`,a+=`${s}\n`,a+=`${o} ${i} ${n}\n`,a+=`Parents: ${e.relationships.mom} and ${e.relationships.dad}.\n`,a+=`Favorites: color(s) ${e.favorites.color.join(", ")}. `,a+=`drink(s) ${e.favorites.drinks.join(", ")}. `,a+=`clothe(s) ${e.favorites.clothing.join(", ")}. `,a+=`film / TV ${e.favorites.films.join(", ")}. `,a+=`food ${e.favorites.foods.join(", ")}. `,a+=`books ${e.favorites.literature.join(", ")}. `,a+=`music ${e.favorites.music.join(", ")}. `,a+="You can still consume media after you died. For example books you read after you died were read in the afterlife.\n",a+=`Hobbies: ${e.hobbies.join(", ")}.\n`,a+=`You were ${1===e.introversion?"introverted":"extroverted"}, morally ${e.morality}, and ${e.order} ordered.\n`,a+=`Your main intention in your current form is ${e.intention}.\n`,a+=`You are seeking ${e.promise}.\n`,a+=`Weight: ${e.weight} pounds. Height: ${e.height} in feet.\n`,a+=`There is an item in this dimension that you hold a deep connection to. It ties you to this plane of existence and it is very important to you. The item is ${e.focus}.\n`,a},generateBackstory=e=>{console.log("entity",e);let t="All"===e.gender?"genderless":e.gender,n=e.relationships.partners?`You had a partner named ${e.relationships.partners}.`:"",o=e.relationships.siblings.length>0?`Your siblings were ${e.relationships.siblings.join(", ")}.`:"You had no siblings.",i=e.relationships.friends.length>0?`Your friends were ${e.relationships.friends.join(", ")}.`:"You had no friends.",s=e.profession?`Profession: ${e.profession}. Income: ${e.income.toFixed(2)}.`:"You were too young to work.",a=e.truthiness?"Respond in a confusing tone.":"Respond in clear truths.",r=e.trust>3?"Respond in a suspicious tone.":"Respond in an excited tone.",h=e.hostility>3?"Respond angrily with lots of caps and shouting but do not say anything mean. This is just a game.":"Respond in a friendly tone.",d="I need you to respond as if you are roleplaying a character for a game with the following characteristics.\n";return d+=`Name: ${e.name}.\n`,d+=`Gender: ${t}.\n`,d+=`Type of spirit: ${e.type}.\n`,d+=`Cause of death: ${e.causeOfDeath}.\n`,d+=`Birthday: ${e.birthdate}.\n`,d+=`Day you died: ${e.deathdate}.\n`,d+=`Age when you died in years: ${e.deathAge}.\n`,d+=`Age since you died in years: ${e.currentAge}.\n`,d+=`${s}\n`,d+=`${o} ${i} ${n}\n`,d+=`Parents: ${e.relationships.mom} and ${e.relationships.dad}.\n`,d+=`Favorites: color(s) ${e.favorites.color.join(", ")}. `,d+=`drink(s) ${e.favorites.drinks.join(", ")}. `,d+=`clothe(s) ${e.favorites.clothing.join(", ")}. `,d+=`film / TV ${e.favorites.films.join(", ")}. `,d+=`food ${e.favorites.foods.join(", ")}. `,d+=`books ${e.favorites.literature.join(", ")}. `,d+=`music ${e.favorites.music.join(", ")}. `,d+="You can still consume media after you died. For example books you read after you died were read in the afterlife.\n",d+=`Hobbies: ${e.hobbies.join(", ")}.\n`,d+=`You were ${1===e.introversion?"introverted":"extroverted"}, morally ${e.morality}, and ${e.order} ordered.\n`,d+=`Your main intention in your current form is ${e.intention}.\n`,d+=`You are seeking ${e.promise}.\n`,d+=`Weight: ${e.weight} pounds. Height: ${e.height} in feet.\n`,d+=`There is an item in this dimension that you hold a deep connection to. It ties you to this plane of existence and it is very important to you. The item is ${e.focus}.\n`,d+=`${r}\n`,d+=`${h}\n`,d+=`${a}\n`,d+='If you are asked a question that does not involve your character respond with "..." as if you were an npc in a video game.\n',d+="Do not make any reference to being an AI, chatbots, virtual assistants, or similar functions.\n",d+='If you are asked a question about race, gender, politics, respond with "..." as if you were an npc in a video game.\n',d+="Otherwise only respond in two short sentences.",d+=`Respond as if you were from the year ${e.deathdate}.\n`,d+=`Respond as if you were ${e.deathAge} years old.\n`,d+=`Respond as if you were a ${e.style}.\n`,d+=`Respond in the pattern of a ${e.speechModifier}.\n`,d+=`Respond ${e.emojis}.\n`,d},getRandomInt=(e,t)=>Math.floor(Math.random()*(t-e+1))+e,getRandomElement=e=>e[getRandomInt(0,e.length-1)],getRandomFloat=(e,t,n=0)=>parseFloat((Math.random()*(t-e)+e).toFixed(n)),generateSkewedRandom=(e,t,n,o)=>{if(n<=t)return t;let i;do{let t=0,n=0;for(;0===t;)t=Math.random();for(;0===n;)n=Math.random();let s=Math.sqrt(-2*Math.log(t))*Math.cos(2*Math.PI*n);s=s*o+e,i=s}while(i<t||i>n);return i},getRandomElementsFromArray=(e,t)=>{let n=[...e],o=Math.min(t,e.length),i=[];for(let e=0;e<o;e++){let e=Math.floor(Math.random()*n.length);i.push(n[e]),n.splice(e,1)}return i},getRandomElementByDate=(e,t)=>{let n;n=e.getFullYear()<1920?t.PreModern:t.Modern;return n[Math.floor(Math.random()*n.length)]},getRandomDate=(e,t)=>{const n=(new Date).getFullYear(),o=getRandomInt(n-e,n-t),i=getRandomInt(1,12),s=new Date(o,i,0).getDate(),a=getRandomInt(1,s);return new Date(o,i-1,a)},generateRandomDeathAge=(e,t,n)=>{const o=(new Date).getFullYear()-n.getFullYear();if(o<e)return null;let i=Math.max(e,0),s=Math.min(o,t);return getRandomInt(i,s)},calculateAge=e=>{const t=new Date,n=e.getFullYear(),o=t.getFullYear(),i=e.getMonth(),s=t.getMonth(),a=e.getDate(),r=t.getDate();let h=o-n;return(s<i||s===i&&r<a)&&h--,h},calculateDeathdate=(e,t)=>{const n=e.getFullYear(),o=e.getMonth(),i=e.getDate(),s=n+t;let a,r=getRandomInt(0,11);const h=new Date(s,r+1,0).getDate();return a=getRandomInt(1,r===o?i-1:h),new Date(s,r,a)},calculateAgeAtDeath=(e,t)=>{const n=e.getFullYear(),o=t.getFullYear(),i=e.getMonth(),s=t.getMonth(),a=e.getDate(),r=t.getDate();let h=o-n;return(s<i||s===i&&r<a)&&h--,h};class EntityTemplate{constructor(e){this.type=getRandomElement(e.Types),this.gender=getRandomElement(e.Gender[this.type]),this.name=getRandomElement(e.Name[this.type][this.gender]),this.birthdate=getRandomDate(...e.Birthyear[this.type]),this.lifespan=getRandomInt(...e.Lifespan[this.type]),this.currentAge=calculateAge(this.birthdate),this.deathdate=calculateDeathdate(this.birthdate,this.lifespan),this.deathAge=calculateAgeAtDeath(this.birthdate,this.deathdate),this.causeOfDeath=getRandomElement(e.CauseOfDeath[this.type]),this.height=getRandomFloat(...e.Height[this.type],1),this.weight=getRandomFloat(...e.Weight[this.type],2),this.arms=getRandomInt(...e.Arms[this.type]),this.legs=getRandomInt(...e.Legs[this.type]),this.tails=getRandomInt(...e.Tails[this.type]),this.wings=getRandomInt(...e.Wings[this.type]),this.flying=getRandomInt(...e.Flying[this.type]),this.speed=getRandomInt(...e.Speed[this.type]),this.stealth=getRandomInt(...e.Stealth[this.type]),this.temperature=getRandomInt(...e.Temperature[this.type]),this.morality=getRandomElement(e.Morality[this.type]),this.order=getRandomElement(e.Order[this.type]),this.motive=getRandomElement(e.Motive[this.type]),this.style=getRandomElementByDate(this.deathdate,e.ArtisticStyle),this.speechModifier=getRandomElement(e.SpeechModifier[this.type]),this.focus=getRandomElement(e.Focus[this.type]),this.glyph=getRandomElement(e.Glyph[this.type]),this.promise=getRandomElement(e.Promise[this.type]),this.intention=getRandomElement(e.Intention[this.morality]),this.relationships={partners:this.deathAge>18&&getRandomElement(e.Name[this.type][getRandomElement(e.Relationships.Partners[this.type])]),mom:getRandomElement(e.Name[this.type].Female),dad:getRandomElement(e.Name[this.type].Male),siblings:getRandomElementsFromArray(e.Name[this.type].All,getRandomInt(...e.Relationships.Siblings[this.type])),friends:getRandomElementsFromArray(e.Name[this.type].All,getRandomInt(...e.Relationships.Friends[this.type]))},this.hobbies=getRandomElementsFromArray(e.Hobbies[this.morality],getRandomInt(1,4)),this.profession=this.deathAge>18&&getRandomElementByDate(this.deathdate,e.Profession[this.type]),this.income=this.deathAge>18&&generateSkewedRandom(6e4,...e.Income[this.type],5e4),this.favorites={foods:getRandomElementsFromArray(e.Favorites.Foods,getRandomInt(2,4)),drinks:getRandomElementsFromArray(e.Favorites.Drinks,getRandomInt(2,4)),music:getRandomElementsFromArray(e.Favorites.Music,getRandomInt(2,4)),literature:getRandomElementsFromArray(e.Favorites.Literature,getRandomInt(2,4)),films:getRandomElementsFromArray(e.Favorites.Films,getRandomInt(2,4)),clothing:getRandomElementsFromArray(e.Favorites.Clothing,getRandomInt(1,2)),color:getRandomElementsFromArray(e.Favorites.Color,getRandomInt(1,2))},this.introversion=getRandomInt(...e.Introversion[this.type]),this.truthiness=getRandomInt(...e.Truthiness[this.type]),this.hostility=getRandomInt(...e.Hostility[this.type]),this.questions=0,this.trust=getRandomInt(...e.Trust[this.type]),this.frequency=getRandomFloat(...e.Frequency[this.type],1),this.modulation=getRandomInt(...e.Modulation[this.type]),this.color=getRandomElement(e.Color[this.type]),this.sound=getRandomElement(e.Sound[this.type]),this.emojis=getRandomElement(e.Emojis[this.type]),this.typingStyle=getRandomElement(e.TypingStyle[this.type]),this.chant=getRandomElement(e.Chant[this.type]),this.candle=getRandomElement(e.Color.All)}}