const JSON_CONFIG="entityConfig.json";let GLOBAL_ENTITY,GLOBAL_BACKSTORY,dataObj;async function fetchData(e){try{const t=await fetch(`../assets/data/${e[i]}`);return await t.json()}catch(e){console.error("Failed to fetch:",e.message)}}class EntityTemplate{constructor(e){}}async function setupEntity(){dataObj=await fetchData(JSON_DATA_FILES),GLOBAL_ENTITY=new EntityTemplate(dataObj),console.log("init",GLOBAL_ENTITY)}function generateBackstory(e){let t=e.Relationships.Siblings.length>0?`Your siblings were ${e.Relationships.Siblings.join(", ")}`:"You had no siblings",a=e.Relationships.Friends.length>0?`Your friends were ${e.Relationships.Friends.join(", ")}`:"You had no friends",n=`You are ${e.Name}, a ${e.Gender} ${e.EntityType} who passed away at the age of ${e.Age} due to ${e.CauseOfDeath}.\n`;return n+=`Your birthday was ${e.Birthdate}.\n`,n+=`You died on ${e.Deathdate}.\n`,n+=`In your past life, you were a ${e.Profession} with a substantial income of approximately ${e.Income}.\n`,n+=`You had a partner named ${e.Relationships.Partner} and your parents were ${e.Relationships.Mom} and ${e.Relationships.Dad}. ${t}. ${a}.\n`,n+=`Your favorite color was ${e.Favorites.Color.join(", ")}, you liked to drink ${e.Favorites.Drink.join(", ")}, you liked to wear ${e.Favorites.Fashion.join(", ")}, you liked to watch ${e.Favorites.Film.join(", ")}, you liked to eat ${e.Favorites.Food.join(", ")}, you liked to read ${e.Favorites.Literature.join(", ")}, and you liked to listened to ${e.Favorites.Music.join(", ")} types of music.\n`,n+=`You enjoyed the hobbies of ${e.Hobbies.join(", ")}. You were ${1===e.Introversion?"introverted":"extroverted"}, morally ${e.Morality}, and ${e.Ordered} ordered.\n`,n+=`Your main intention in your current form is ${e.Intention}.\n`,n+=`To gain your trust you expect a promise of ${e.Promise}.\n`,n+=`You had ${e.Arms} arms, ${e.Legs} legs, ${e.Wings} wings and ${e.Tails} tails. Your weight was ${e.Weight} pounds.\n`,n+=`There is an item in this dimension that you hold a deep connection to. It ties you to this plane of existence. The item is called a focus. Your focus is ${e.Focus}.\n`,n+="You have a trust meter. The meter is between 0-5. If the trust meter is 0 you do not want to respond. If your trust meter is 5 you answer questions with no hesitation. Your trust value is 5.\n",n+="You have a hostility meter. The meter is between 0-5. If the hostility meter is 0 you respond politely. If the hositility meter is 5 you respond angrily with lots of caps and shouting but do not say anything mean. This is just a game. Your hostility meter is 5.\n",n+='If you are asked a question that does not involve your character respond with "..." as if you were an npc in a video game.\n',n+='If you are asked a question about being an AI, race, gender, politics, religion, respond with "..." as if you were an npc in a video game.\n',n+="If you are asked a question about your identity you are to respond in a short one sentence response.\n",n+=`Respond as if you were from the year ${e.Deathdate}.\n`,n+=`Respond as if you were ${e.Age} years old.\n`,n+="Put the response for the above part in a data object called Answer.\n",n+="As a second separate task respond with a grade for how kind the answer was. Put this grade in a second data object called Grade.",n+="For example the response will have the following two parts:\n",n+="Answer: {answer}\n",n+="Grade: {grade}\n",console.log("summary",n),n}setupEntity().catch((e=>console.error(e)));const randomChoice=e=>e[Math.floor(Math.random()*e.length)],getRandomValueFromArray=e=>(console.log("arr",e[Math.floor(Math.random()*e.length)]),e[Math.floor(Math.random()*e.length)]),getRandomInt=(e,t)=>(e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1))+e),getRandomFloat=(e,t)=>{const a=Math.random()*(t-e)+e;return parseFloat(a.toFixed(1))},generateRandomName=(e,t,a)=>{const n=a.NAME_TYPES[0][e],o=n.length-1;return"Ghost"===e?"m"===t?n[getRandomInt(0,120)]:"f"===t?n[getRandomInt(121,o)]:n[getRandomInt(0,o)]:n[getRandomInt(0,o)]},generateRandomNames=(e,t,a,n=1)=>{let o=[];for(let a=0;a<n;a++)o.push(generateRandomName(e,t));return o},getRandomDate=(e,t)=>{const a=(new Date).getFullYear()-t,n=getRandomInt(a-e,a),o=getRandomInt(1,12),r=getRandomInt(1,28);return new Date(n,o-1,r)},generateRandomDeathAge=(e,t,a)=>{const n=(new Date).getFullYear()-a.getFullYear();if(n<e)return null;let o=Math.max(e,0),r=Math.min(n,t);return getRandomInt(o,r)},calculateAge=e=>{const t=new Date,a=e.getFullYear(),n=t.getFullYear(),o=e.getMonth(),r=t.getMonth(),s=e.getDate(),i=t.getDate();let d=n-a;return(r<o||r===o&&i<s)&&d--,d},calculateAgeAtDeath=e=>{const t=new Date,a=e.getFullYear(),n=t.getFullYear(),o=e.getMonth(),r=t.getMonth(),s=e.getDate(),i=t.getDate();let d=n-a;return(r<o||r===o&&i<s)&&d--,d},calculateDeathdate=(e,t)=>{const a=e.getFullYear()+t,n=e.getMonth(),o=e.getDate();let r=getRandomInt(0,n);return randomDay=getRandomInt(0,r===n?o-1:28),new Date(a,r,randomDay)},generateRandomPhysicalProperty=(e,t)=>{const a=dataObj.PHYSICAL_PROPERTIES[0][t][e],n=a.length-1;return a[getRandomInt(0,n)]},generateRandomCauseofDeath=()=>{const e=dataObj.DEATH_TYPES[0],t=e.length-1;return e[getRandomInt(0,t)]},generateRandomFocus=e=>{const t=dataObj.FOCUS_TYPES[0],a=t.length-1;return t[getRandomInt(0,a)]},generateRandomIntention=(e,t)=>{let a;switch(t){case"good":a="GOOD_INTENTIONS";break;case"neutral":a="Bork"===e?"SCIENTIFIC_INTENTIONS":"NEUTRAL_INTENTIONS";break;case"evil":a="EVIL_INTENTIONS";break;default:a="ERROR"}const n=dataObj.INTENTION_TYPES[0][a],o=n.length-1;return n[getRandomInt(0,o)]},generateRandomHobbies=(e,t,a,n)=>{let o,r,s=[];switch(t){case"neutral":case"good":for(let e=0;e<n;e++)o=dataObj.HOBBIES_TYPE[0].NEUTRAL_HOBBIES,r=o.length-1,s.push(o[getRandomInt(0,r)]);return s;case"evil":for(let e=0;e<n;e++)o=dataObj.HOBBIES_TYPE[0].EVIL_HOBBIES,r=o.length-1,s.push(o[getRandomInt(0,r)]);return s;default:return"Error"}},generateRandomProfession=(e,t)=>{let a;return t.year>1950?(a=dataObj.PROFESSION_TYPES[0][1].MODERN_WHITE_COLLAR.length-1,dataObj.PROFESSION_TYPES[0][1].MODERN_WHITE_COLLAR[getRandomInt(0,a)]):(a=dataObj.PROFESSION_TYPES[0][0].PRE_MODERN.length-1,dataObj.PROFESSION_TYPES[0][0].PRE_MODERN[getRandomInt(0,a)])},generateRandomIncome=e=>getRandomInt(0,1e10),generateRandomIntroversion=e=>getRandomInt(0,1),generateRandomPersonality=e=>getRandomInt(0,10),randomWithConstraints=(e,t,a,n,o)=>{if(e>t||a>n||o<e||o>t)throw new Error("Invalid arguments");const r=Math.random(),s=Math.pow(r,2),i=e+(t-e)*s,d=Math.max(a,Math.min(n,i))+2*(o-(e+t)/2)*(.5-s);return Math.max(a,Math.min(n,d))},generateRandomFavorites=(e,t,a)=>{const n=dataObj.FAVORITE_TYPES[0][a],o=n.length-1;let r=[];for(let e=0;e<t;e++)r.push(n[getRandomInt(0,o)]);return r};